apply plugin: 'maven'
apply plugin: 'java'

group = 'com.manniwood'
version = '2.2.0-SNAPSHOT'
description = "Manni's MyBatis PostgreSQL Types"

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.mybatis:mybatis:3.2.7'
    compile 'org.postgresql:postgresql:9.3-1101-jdbc4'
    testCompile 'ch.qos.logback:logback-core:1.1.2'
    testCompile 'ch.qos.logback:logback-classic:1.1.2'
    testCompile 'org.slf4j:slf4j-api:1.7.7'
    testCompile 'org.testng:testng:6.8.8'
}

test {
    useTestNG()

    // options.suites("$projectDir/src/test/resources/testng.xml")
    // work with gradle 11
    options.suites file('src/test/resources/testng.xml')

    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

artifacts {
    archives sourcesJar
}

task printBintraySettings << {
    println "mwBintrayUser: $mwBintrayUser"
    println "mwBintrayApiKey: $mwBintrayApiKey"
}

uploadArchives {
    repositories {
        mavenDeployer {
            // If you want to make a local mvn dir layout, use this next line:
            // repository(url: "file:///$buildDir/repo")

            // This uploads to Bintray. You need need mwBintrayUser and
            // mwBintrayApiKey defined in ~/.gradle/gradle.properties
            repository(url: "https://api.bintray.com/maven/manniwood/maven/mmpt") {
                authentication(userName: mwBintrayUser, password: mwBintrayApiKey)
            }
            pom {
                project {
                    inceptionYear '2014'
                    licenses {
                        license {
                            name 'MIT License'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                }
            }.whenConfigured { pom ->
                // Maven scopes are: compile, runtime, test, system, provided.
                // Gradle seems to map its own testCompile to Maven's test
                println "\nDependencies before filtering:\n"
                pom.dependencies.each {
                    println "SCOPE: $it.scope, $it"
                }
                pom.dependencies.removeAll { it.scope == "test" }
                println "\nDependencies after removing test scope:\n"
                pom.dependencies.each {
                    println "SCOPE: $it.scope, $it"
                }
            }
        }
    }
}


